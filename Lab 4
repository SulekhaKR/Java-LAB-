import java.util.Scanner;

// Abstract class Robber
abstract class Robber {
    // Abstract methods to be implemented by subclasses
    public abstract int RowHouses(int[] rowhouseAmounts);

    public abstract int RoundHouses(int[] roundhouseAmounts);

    public abstract int SquareHouse(int[] squarehouseAmounts);

    public abstract int MultiHouseBuilding(int[][] multiHouseAmounts);

    // Default method
    public void MachineLearning() {
        System.out.println("I love MachineLearning");
    }

    // Method to print class details
    public void RobbingClass() {
        System.out.println("MScAI&ML");
    }
}

// Class JAVAProfessionalRobber inheriting from Robber
class JAVAProfessionalRobber extends Robber {

    // Implementation of RowHouses method
    @Override
    public int RowHouses(int[] rowhouseAmounts) {
        int n = rowhouseAmounts.length;
        if (n == 0) return 0;
        if (n == 1) return rowhouseAmounts[0];

        int[] dp = new int[n];
        dp[0] = rowhouseAmounts[0];
        dp[1] = Math.max(rowhouseAmounts[0], rowhouseAmounts[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + rowhouseAmounts[i]);
        }
        return dp[n - 1];
    }

    // Implementation of RoundHouses method
    @Override
    public int RoundHouses(int[] roundhouseAmounts) {
        int n = roundhouseAmounts.length;
        if (n == 1) return roundhouseAmounts[0];
        return Math.max(robHelper(roundhouseAmounts, 0, n - 2), robHelper(roundhouseAmounts, 1, n - 1));
    }

    private int robHelper(int[] amounts, int start, int end) {
        int prev1 = 0, prev2 = 0;
        for (int i = start; i <= end; i++) {
            int current = Math.max(prev1, prev2 + amounts[i]);
            prev2 = prev1;
            prev1 = current;
        }
        return prev1;
    }

    // Implementation of SquareHouse method
    @Override
    public int SquareHouse(int[] squarehouseAmounts) {
        return RowHouses(squarehouseAmounts); // Same logic as RowHouses
    }

    // Implementation of MultiHouseBuilding method
    @Override
    public int MultiHouseBuilding(int[][] multiHouseAmounts) {
        int maxRobbed = 0;
        for (int[] houseAmounts : multiHouseAmounts) {
            maxRobbed += RowHouses(houseAmounts);
        }
        return maxRobbed;
    }
}

// Main class for testing
public class Lab4 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        JAVAProfessionalRobber robber = new JAVAProfessionalRobber();

        // User input for RowHouses
        System.out.print("Enter the number of row houses: ");
        int n = scanner.nextInt();
        int[] rowhouseAmounts = new int[n];
        System.out.println("Enter the money in each row house:");
        for (int i = 0; i < n; i++) {
            rowhouseAmounts[i] = scanner.nextInt();
        }
        System.out.println("RowHouses: " + robber.RowHouses(rowhouseAmounts));

        // User input for RoundHouses
        System.out.print("Enter the number of round houses: ");
        n = scanner.nextInt();
        int[] roundhouseAmounts = new int[n];
        System.out.println("Enter the money in each round house:");
        for (int i = 0; i < n; i++) {
            roundhouseAmounts[i] = scanner.nextInt();
        }
        System.out.println("RoundHouses: " + robber.RoundHouses(roundhouseAmounts));

        // User input for SquareHouse
        System.out.print("Enter the number of square houses: ");
        n = scanner.nextInt();
        int[] squarehouseAmounts = new int[n];
        System.out.println("Enter the money in each square house:");
        for (int i = 0; i < n; i++) {
            squarehouseAmounts[i] = scanner.nextInt();
        }
        System.out.println("SquareHouse: " + robber.SquareHouse(squarehouseAmounts));

        // User input for MultiHouseBuilding
        System.out.print("Enter the number of building types in the multi-house building: ");
        int m = scanner.nextInt();
        int[][] multiHouseAmounts = new int[m][];
        for (int i = 0; i < m; i++) {
            System.out.print("Enter the number of houses in building type " + (i + 1) + ": ");
            int k = scanner.nextInt();
            multiHouseAmounts[i] = new int[k];
            System.out.println("Enter the money in each house of building type " + (i + 1) + ":");
            for (int j = 0; j < k; j++) {
                multiHouseAmounts[i][j] = scanner.nextInt();
            }
        }
        System.out.println("MultiHouseBuilding: " + robber.MultiHouseBuilding(multiHouseAmounts));

        // Additional methods
        robber.MachineLearning();
        robber.RobbingClass();

        scanner.close();
    }
}

